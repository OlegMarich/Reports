
const ExcelJS = require('exceljs');
const path = require('path');
const fs = require('fs');

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏ –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—É
const selectedDate = process.argv[2];
if (!selectedDate) {
  console.error('‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–∞—Ç—É —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç');
  process.exit(1);
}

// üì• –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É data.json
const jsonPath = path.join(__dirname, 'output', selectedDate, 'data.json');
if (!fs.existsSync(jsonPath)) {
  console.error(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª data.json –¥–ª—è –¥–∞—Ç–∏ ${selectedDate}`);
  process.exit(1);
}

const data = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'));
const outputDir = path.join(__dirname, 'output', selectedDate);
const templatePath = path.join(__dirname, 'template.xlsx');

// üì¶ –õ–æ–≥—ñ–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–∞–ª–µ—Ç
function getBoxesPerPallet(clientName) {
  const name = (clientName || '').toLowerCase();
  const rules = {
    'aldi': 28, 'lidl': 48, 'biedronka': 28, 'spar hrvatska': 48,
    'spar ljubljana': 48, 'spar': 32, 'penny': 32, 'metro': 28,
    'ta-moro': 48, 'cba': 48, 'lunnys': 48,
  };
  let boxesPerPallet = 1;
  for (const [key, value] of Object.entries(rules)) {
    if (name.includes(key)) {
      boxesPerPallet = value;
      break;
    }
  }
  return boxesPerPallet === 1 ? 2 : boxesPerPallet;
}

// üîë –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –∫–ª—ñ—î–Ω—Ç—É + –∞–≤—Ç–æ
function normalizeClientKey(entry) {
  const client = (entry['Odbiorca'] || '').replace(/\s*\(.*bio.*\)/i, '').trim();
  const truck = entry['Kierowca'] || 'unknown';
  return `${client}__${truck}`;
}

// üß† –ù–∞–¥—ñ–π–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è BIO
function isBioEntry(entry) {
  const odb = (entry['Odbiorca'] || '').toLowerCase();
  const produkt = (entry['Produkt'] || '').toLowerCase();
  const typ = (entry['Typ'] || '').toLowerCase();
  const line = (entry['Linia'] || entry['Line'] || entry['Nazwa linii'] || '').toLowerCase();
  // –≤–≤–∞–∂–∞—î–º–æ BIO, —è–∫—â–æ –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è —Å–ª–æ–≤–æ "bio" –≤ –±—É–¥—å-—è–∫–æ–º—É –∑ –ø–æ–ª—ñ–≤
  // –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ \bbio\b —â–æ–± —É–Ω–∏–∫–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∑–±—ñ–≥—ñ–≤ —Ç–∏–ø—É "biodegradable"
  const re = /\bbio\b/;
  return re.test(odb) || re.test(produkt) || re.test(typ) || re.test(line);
}

const grouped = {};
for (const entry of data) {
  const key = normalizeClientKey(entry);
  if (!grouped[key]) grouped[key] = [];
  grouped[key].push(entry);
}

// üßæ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —à–∞–±–ª–æ–Ω—ñ–≤
async function fillTemplate() {
  for (const [key, entries] of Object.entries(grouped)) {
    const [client, truck] = key.split('__');
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(templatePath);

    const mainSheet = workbook.getWorksheet('RAPORT WYDANIA F-NR 15');
    if (!mainSheet) {
      console.error('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—Ä–∫—É—à "RAPORT WYDANIA F-NR 15" —É —à–∞–±–ª–æ–Ω—ñ');
      continue;
    }

    // üìä –ê–≥—Ä–µ–≥—É—î–º–æ –±–∞–Ω–∞–Ω–∏ —Ç–∞ –±—ñ–æ-–±–∞–Ω–∞–Ω–∏ –æ–∫—Ä–µ–º–æ + –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
    const totals = { banana: { qty: 0, pal: 0 }, bio: { qty: 0, pal: 0 } };
    let firstBanana = null;
    let firstBio = null;

    for (const entry of entries) {
      const qty = Number(entry['Ilo≈õƒá razem'] || 0);
      const palGiven = Number(entry['Pal'] || 0);
      const isBio = isBioEntry(entry);

      const pal = palGiven > 0 ? palGiven : (qty > 0 ? Math.ceil(qty / getBoxesPerPallet(client)) : 0);

      if (isBio) {
        totals.bio.qty += qty;
        totals.bio.pal += pal;
        if (!firstBio) firstBio = entry;
      } else {
        totals.banana.qty += qty;
        totals.banana.pal += pal;
        if (!firstBanana) firstBanana = entry;
      }
    }

    // üñä –ó–∞–ø–∏—Å—É—î–º–æ —É –≤–µ—Ä—Ö–Ω—ñ–π –±–ª–æ–∫ (–±–∞–Ω–∞–Ω–∏)
    if (totals.banana.qty > 0) {
      const e = firstBanana || entries[0];
      mainSheet.getCell('J8').value = e['Data wysy≈Çki'] || '';
      mainSheet.getCell('C8').value = client || '';
      mainSheet.getCell('J25').value = `${totals.banana.qty} (${totals.banana.pal})`;
      mainSheet.getCell('J29').value = e['Kierowca'] || '';
      mainSheet.getCell('E10').value = e['Godzina'] || '';
    }

    // üñä –ó–∞–ø–∏—Å—É—î–º–æ —É –Ω–∏–∂–Ω—ñ–π –±–ª–æ–∫ (BIO) –Ω–∞ —Ç–æ–º—É –∂ –∞—Ä–∫—É—à—ñ
    if (totals.bio.qty > 0) {
      const e = firstBio || entries[0];
      mainSheet.getCell('J60').value = e['Data wysy≈Çki'] || '';
      mainSheet.getCell('C60').value = `${client} (BIO)`;
      mainSheet.getCell('J69').value = `${totals.bio.qty} (${totals.bio.pal})`;
      mainSheet.getCell('K63').value = e['Kierowca'] || '';
      mainSheet.getCell('E61').value = e['Godzina'] || '';
    }

    // üîç –õ–æ–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    console.log(`‚û°Ô∏è  ${client} [${truck}]  banana=${totals.banana.qty} / bio=${totals.bio.qty}`);

    // üìÇ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
    const safeClientName = client.replace(/[\\/:*?"<>|]/g, '_');
    const safeTruck = truck.replace(/[\\/:*?"<>|]/g, '_');
    const clientBaseDir = path.join(outputDir, safeClientName);
    if (!fs.existsSync(clientBaseDir)) fs.mkdirSync(clientBaseDir, { recursive: true });

    const fileName = `Quality report ${safeClientName}_${safeTruck}.xlsx`;
    const outputPath = path.join(clientBaseDir, fileName);

    await workbook.xlsx.writeFile(outputPath);
    console.log(`üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª: ${outputPath}`);
  }

  console.log('‚úÖ –£—Å—ñ –∑–≤—ñ—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
}

fillTemplate().catch(err => {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', err);
  process.exit(1);
});
