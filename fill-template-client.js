const ExcelJS = require('exceljs');
const path = require('path');
const fs = require('fs');

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏ –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—É
const selectedDate = process.argv[2];
if (!selectedDate) {
  console.error('‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–∞—Ç—É —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç');
  process.exit(1);
}

const jsonPath = path.join(__dirname, 'output', selectedDate, 'data.json');
if (!fs.existsSync(jsonPath)) {
  console.error(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª data.json –¥–ª—è –¥–∞—Ç–∏ ${selectedDate}`);
  process.exit(1);
}

const data = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'));
const outputDir = path.join(__dirname, 'output', selectedDate);

// üìÑ –®–ª—è—Ö –¥–æ —à–∞–±–ª–æ–Ω—É
const templatePath = path.join(__dirname, 'template.xlsx');

// üì¶ –õ–æ–≥—ñ–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–∞–ª–µ—Ç
function getBoxesPerPallet(clientName) {
  const name = clientName.toLowerCase();

  let boxesPerPallet = 1;

  if (name.includes('aldi')) boxesPerPallet = 28;
  else if (name.includes('lidl')) boxesPerPallet = 48;
  else if (name.includes('biedronka')) boxesPerPallet = 28;
  else if (name.includes('spar hrvatska')) boxesPerPallet = 48;
  else if (name.includes('spar ljubljana')) boxesPerPallet = 48;
  else if (name.includes('spar')) boxesPerPallet = 32;
  else if (name.includes('penny')) boxesPerPallet = 32;
  else if (name.includes('metro')) boxesPerPallet = 28;
  else if (name.includes('ta-moro')) boxesPerPallet = 48;
  else if (name.includes('cba')) boxesPerPallet = 48;
  else if (name.includes('lunnys')) boxesPerPallet = 48;

  // –Ø–∫—â–æ –ª–∏—à–µ 1 —è—â–∏–∫ –Ω–∞ –ø–∞–ª–µ—Ç—ñ ‚Äî –¥–æ–¥–∞—î–º–æ —â–µ 1 –ø–∞–ª–µ—Ç—É
  if (boxesPerPallet === 1) {
    return boxesPerPallet + 1;
  }

  return boxesPerPallet;
}

// üß† –ì—Ä—É–ø—É—î–º–æ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö
const grouped = {};
data.forEach(entry => {
  const client = entry['Odbiorca'];
  if (!grouped[client]) grouped[client] = [];
  grouped[client].push(entry);
});

// üßæ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —à–∞–±–ª–æ–Ω—ñ–≤
async function fillTemplate() {
  for (const client in grouped) {
    const entries = grouped[client];
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(templatePath);

    const mainSheet = workbook.getWorksheet('RAPORT WYDANIA F-NR 15');
    const secondSheet = workbook.worksheets[1]; // –∞–±–æ workbook.getWorksheet('BIO')

    if (!mainSheet) {
      console.error(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—Ä–∫—É—à RAPORT WYDANIA F-NR 15 –¥–ª—è ${client}`);
      continue;
    }

    // üîπ –ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Å (–∑–≤–∏—á–∞–π–Ω–∏–π)
    const entry1 = entries[0];
    const qty1 = Number(entry1['Ilo≈õƒá razem'] || 0);
    const pal1 = Number(entry1['Pal'] || 0) || Math.ceil(qty1 / getBoxesPerPallet(client));

    mainSheet.getCell('J8').value = entry1['Data wysy≈Çki'] || '';
    mainSheet.getCell('C8').value = client || '';
    mainSheet.getCell('J25').value = `${qty1} (${pal1})`;
    mainSheet.getCell('J29').value = entry1['Kierowca'] || '';
    mainSheet.getCell('E10').value = entry1['Godzina'] || '';

    // üî∏ –î—Ä—É–≥–∏–π –∑–∞–ø–∏—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, BIO) ‚Äî —è–∫—â–æ —î
    if (entries.length > 1 && secondSheet) {
      const entry2 = entries[1];
      const qty2 = Number(entry2['Ilo≈õƒá razem'] || 0);
      const pal2 = Number(entry2['Pal'] || 0) || Math.ceil(qty2 / getBoxesPerPallet(client));

      secondSheet.getCell('J62').value = entry2['Data wysy≈Çki'] || '';
      secondSheet.getCell('C62').value = client + ' (BIO)' || '';
      secondSheet.getCell('J71').value = `${qty2} (${pal2})`;
      secondSheet.getCell('K65').value = entry2['Kierowca'] || '';
      secondSheet.getCell('E63').value = entry2['Godzina'] || '';
    }

    const safeClientName = client.replace(/[\\/:*?"<>|]/g, '_');
    const fileName = `${safeClientName}.xlsx`;
    const outputPath = path.join(outputDir, fileName);

    await workbook.xlsx.writeFile(outputPath);
    console.log(`üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª: ${outputPath}`);
  }

  console.log('‚úÖ –£—Å—ñ –∑–≤—ñ—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
}

fillTemplate().catch(console.error);
