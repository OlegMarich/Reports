const dropZone = document.getElementById('dropZone');
const fileInput = document.getElementById('fileInput');
const selectBtn = document.getElementById('selectBtn');
const generateBtn = document.getElementById('generateBtn');
const dateInput = document.getElementById('reportDate'); // –¥–ª—è –∑–≤—ñ—Ç—É
const weekInput = document.getElementById('weekInput');   // –¥–ª—è –ø–ª–∞–Ω—É

const modal = document.getElementById('modalMessage');
const modalText = document.getElementById('modalMessageText');
const modalOkBtn = document.getElementById('modalOkBtn');

const modalWeekPrompt = document.getElementById('modalWeekPrompt'); // —Ç—ñ–ª—å–∫–∏ –¥–ª—è plan

let selectedFiles = [];
let generatedPath = null;

// üü° –í–∏–∑–Ω–∞—á–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º –∑—ñ <body data-mode="...">
function getMode() {
  return document.body.dataset.mode?.toLowerCase();
}

// üìÅ –í–∏–±—ñ—Ä —Ñ–∞–π–ª—ñ–≤
selectBtn?.addEventListener('click', () => {
  fileInput?.click();
});

fileInput?.addEventListener('change', (event) => {
  selectedFiles = Array.from(event.target.files);
  if (selectedFiles.length > 0) {
    generateBtn.style.display = 'inline-block';
    dropZone.innerHTML = `Selected: <strong>${selectedFiles.map((f) => f.name).join(', ')}</strong>`;
  }
});

// ‚ñ∂Ô∏è –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ Generate
generateBtn?.addEventListener('click', () => {
  const mode = getMode();

  if (mode === 'plan') {
    // –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª–∫—É –¥–ª—è —Ç–∏–∂–Ω—è
    weekInput.value = '';
    modalWeekPrompt.style.display = 'flex';
  } else if (mode === 'report') {
    // –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç
    handleDailyReport();
  } else {
    alert('‚ùå Unknown mode. Set <body data-mode="plan"> –∞–±–æ "report".');
  }
});

// ‚ùå –ó–∞–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª–∫—É —Ç–∏–∂–Ω—è
document.getElementById('cancelWeekBtn')?.addEventListener('click', () => {
  modalWeekPrompt.style.display = 'none';
});

// ‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∏–∂–Ω—è ‚Äî –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–ª–∞–Ω—É
document.getElementById('confirmWeekBtn')?.addEventListener('click', async () => {
  const week = weekInput.value.trim();
  if (!week || isNaN(week) || Number(week) < 1 || Number(week) > 53) {
    return alert('‚ö†Ô∏è Please enter a valid week number (1‚Äì53).');
  }

  modalWeekPrompt.style.display = 'none';
  generateBtn.disabled = true;
  generateBtn.textContent = 'Generating...';

  try {
    const response = await fetch(`/api/generate-plan?week=${week}`);
    const text = await response.text();

    let result;
    try {
      result = JSON.parse(text);
    } catch (err) {
      console.error('‚ùå Not a JSON:', text);
      showModalMessage('‚ùå Server did not return valid JSON. Check logs.');
      return;
    }

    if (result.message?.includes('‚úÖ')) {
      generatedPath = `${week}_Week`;
      showModalMessage(`‚úÖ Plan for <strong>week ${week}</strong> generated.<br>Check <code>/output/${generatedPath}</code>`);
    } else {
      showModalMessage(result.message || '‚ùå Failed to generate plan.');
    }
  } catch (err) {
    console.error(err);
    showModalMessage('‚ùå Something went wrong.');
  } finally {
    generateBtn.disabled = false;
    generateBtn.textContent = 'Generate Report';
  }
});

// üìÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
async function handleDailyReport() {
  const date = dateInput?.value;

  if (!date || !/^\d{4}-\d{2}-\d{2}$/.test(date)) {
    return showModalMessage('‚ö†Ô∏è Please select a valid date (YYYY-MM-DD).');
  }

  if (selectedFiles.length === 0) {
    return showModalMessage('‚ö†Ô∏è Please select both Excel files.');
  }

  const formData = new FormData();
  selectedFiles.forEach((file) => formData.append('files', file));

  try {
    generateBtn.disabled = true;
    generateBtn.textContent = 'Generating...';

    const response = await fetch(`/upload?date=${date}`, {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

    const result = await response.json();

    if (result.success) {
      generatedPath = result.date;
      showModalMessage(`‚úÖ Report for <strong>${result.date}</strong> generated.<br>See <code>/output/${result.date}</code>`);
    } else {
      showModalMessage('‚ùå Failed to generate report.');
    }
  } catch (err) {
    console.error(err);
    showModalMessage('‚ùå Something went wrong.');
  } finally {
    generateBtn.disabled = false;
    generateBtn.textContent = 'Generate Report';
  }
}

// üì¶ –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function showModalMessage(message) {
  modalText.innerHTML = message;
  modal.style.display = 'flex';
}

// ü™ü –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏ ‚Üí –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–ø–∫–∏
modalOkBtn?.addEventListener('click', () => {
  modal.style.display = 'none';
  if (generatedPath) {
    window.open(`/output/${generatedPath}`, '_blank');
  }
});
