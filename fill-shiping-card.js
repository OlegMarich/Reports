const ExcelJS = require('exceljs');
const path = require('path');
const fs = require('fs');

// ‚úÖ 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏
const selectedDate = process.argv[2];
if (!selectedDate) {
  console.error('‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–∞—Ç—É —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç');
  process.exit(1);
}

const jsonPath = path.join(__dirname, 'output', selectedDate, 'data.json');
if (!fs.existsSync(jsonPath)) {
  console.error(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª data.json –¥–ª—è –¥–∞—Ç–∏ ${selectedDate}`);
  process.exit(1);
}

const data = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'));
const outputDir = path.join(__dirname, 'output', selectedDate);

// üìÑ –®–ª—è—Ö –¥–æ —à–∞–±–ª–æ–Ω—É
const templatePath = path.join(__dirname, 'shiping card.xlsx');

// üì¶ –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–∞–ª–µ—Ç
function getBoxesPerPallet(clientName) {
  const name = clientName.toLowerCase();
  let boxesPerPallet = 1;

  if (name.includes('aldi')) boxesPerPallet = 28;
  else if (name.includes('lidl')) boxesPerPallet = 48;
  else if (name.includes('biedronka')) boxesPerPallet = 28;
  else if (name.includes('spar hrvatska')) boxesPerPallet = 48;
  else if (name.includes('spar ljubljana')) boxesPerPallet = 48;
  else if (name.includes('spar')) boxesPerPallet = 32;
  else if (name.includes('penny')) boxesPerPallet = 32;
  else if (name.includes('metro')) boxesPerPallet = 28;
  else if (name.includes('ta-moro')) boxesPerPallet = 48;
  else if (name.includes('cba')) boxesPerPallet = 48;
  else if (name.includes('lunnys')) boxesPerPallet = 48;

  if (boxesPerPallet === 1) return 2;
  return boxesPerPallet;
}

// üß† –ì—Ä—É–ø—É—î–º–æ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö
const grouped = {};
data.forEach(entry => {
  const client = entry['Odbiorca'];
  if (!grouped[client]) grouped[client] = [];
  grouped[client].push(entry);
});

// üßæ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —à–∞–±–ª–æ–Ω—ñ–≤
async function fillTemplate() {
  for (const client in grouped) {
    const entries = grouped[client];
    const entry = entries[0];

    const qty = Number(entry['Ilo≈õƒá razem'] || 0);
    const pal = Number(entry['Pal'] || 0) || Math.ceil(qty / getBoxesPerPallet(client));

    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(templatePath);

    const sheet = workbook.getWorksheet('KARTA');
    if (!sheet) {
      console.error(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—Ä–∫—É—à "KARTA" –¥–ª—è ${client}`);
      continue;
    }

    // üìå –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–ª—ñ—Ç–∏–Ω–æ–∫
    sheet.getCell('A1').value = `KARTA WYSY≈ÅKOWA/SHIPPING CARD     Data/Date ${entry['Data wysy≈Çki'] || ''}`;
    sheet.getCell('B11').value = entry['Kierowca'] || '';
    sheet.getCell('B13').value = entry['Nr auta'] || '';
    sheet.getCell('B15').value = client || '';
    sheet.getCell('B20').value = entry['Godzina'] || '';
    sheet.getCell('D26').value = qty;
    sheet.getCell('H26').value = pal;

    const safeClientName = client.replace(/[\\/:*?"<>|]/g, '_');
    const outputPath = path.join(outputDir, `${safeClientName}_card.xlsx`);

    await workbook.xlsx.writeFile(outputPath);
    console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª: ${outputPath}`);
  }

  console.log('üéâ –£—Å—ñ shipping cards –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!');
}

fillTemplate().catch(console.error);
